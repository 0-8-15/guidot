<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet xmlns:bail="http://www.askemos.org/2013/bail/" xmlns:core="http://www.askemos.org/2000/CoreAPI#" xmlns:meta="http://askemos.org/BALL/Meta/2012#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsql="http://www.askemos.org/2006/XSQL/" version="1.0">
<!--

Over all structure of the code (to be changed):

Some variables to be (re)used and named templates to be called.

A xsl:template named "html" comprising the "normal" user interface.

A xsl:template matching type "read" where the processing starts for read operations.

-->
<!--

This variable is for anonymous access only.  Anon access codes are a
way to enable a restricted form of usage for wallets hosted by someone
else.  This is NOT the recommended usage; intented to enable
evaluation without investing much resources.

-->
 <xsl:variable name="login">
  <xsl:if test="form/login != &apos;&apos;">
   <form>
    <xsl:copy-of select="form/login"></xsl:copy-of>
   </form>
  </xsl:if>
 </xsl:variable>
 <xsl:variable name="keeplogin">
  <xsl:if test="form/login/text() != &apos;&apos;">
   <bail:input name="login" type="hidden" xsl:value="form/login/text()"></bail:input>
<!-- to invalidate caches we insert the version number here -->
   <bail:input name="version" type="hidden" bail:value="literal version-identifier(current-place())"></bail:input>
  </xsl:if>
 </xsl:variable>
 <xsl:variable name="metatalk">
  <h3>Notational conventions</h3>
  <p>The following CSS classes call out specific text elements.
Often there is additional information in the title of text elements (mouse over).</p>
  <p>At the moment these styles interfere heavily with useability.
I welcome especially: suggestions on best common law phrase to use for the styles,
preferrable colors and concise wording for the description.</p>
  <dl compact="compact" title="CSS classes">
   <dt class="amount" style="text-align:left;">amount</dt>
   <dd>units transferred</dd>
   <dt class="asset">asset</dt>
   <dd>assets, payment instruments</dd>
   <dt class="sender">sender</dt>
   <dd>outgoing account and signatory</dd>
   <dt class="receiver">receiver</dt>
   <dd>account receiving</dd>
   <dt class="subject">subject</dt>
   <dd>title or subject</dd>
   <dt class="terms">terms</dt>
   <dd>terms&amp;conditions or optional message text; free form</dd>
   <dt class="extern">extern</dt>
   <dd>link to be transferred to the receiver</dd>
   <dt class="intern">intern</dt>
   <dd>link possibly containing login information
(if anon access code is used) <strong>not safe to transfer</strong></dd>
   <dt class="order">order</dt>
   <dd>link to an order</dd>
   <dt class="receipt">receipt</dt>
   <dd>link to a receipt</dd>
   <dt class="notary">notary</dt>
   <dd>link to notary commissioned to audit this document</dd>
   <dt class="attachment">attachment</dt>
   <dd>link to attachment</dd>
   <dt class="fineprint">fineprint</dt>
   <dd>generic fine-print</dd>
   <dt class="executable">executable</dt>
   <dd>machine executable source code</dd>
   <dt class="help">help</dt>
   <dd>meta talk – explanatory text</dd>
  </dl>
  <p>See also the <a href="/A0cd6168e9408c9c095f700d7c6ec3224?_v=wiki&amp;_id=1728">online documentation</a>.</p>
  <div class="help">
   <p>All objects are identified by their <a href="http://askemos.org/index.html?_v=footnote&amp;_id=866">OID</a>,
   which is a cryptographic hash of a) the OID of the creator of the
   object b) date of creation c) the OID of the contract defining the
   type and d) the hash of the (initial) content of the object.</p>
   <p>Experts see <a href="?xmlns=a" title="low level access">meta data</a> for detailed audit.
(Note that this exposes control forms.  Those are void, the corresponding control API is disabled.)</p>
   <p>Wallet user skin version: 0.4</p>
  </div>
 </xsl:variable>
 <xsl:variable name="help-access">
  <div class="help">
   <p>There are <em>two</em> access codes. When
   authenticated anonymously, only the unused code is changed. The
   old code is still active. You need to log in with the new code and
   repeat submitting this form to disable the old code.</p>
   <p>Note that the secret code will appear in
   <strong>plain text</strong> in the URL and elsewhere.  This
   provides no protection against rough peers and is
   <strong>not</strong> secure, just secure enough for easy anonymous
   access control. Don't re-use any passwords here. You've been
   warned.</p>
   <p>Public access codes are optional for non-anonymous users.</p>
  </div>
 </xsl:variable>
 <xsl:variable name="help-wallet">
  <fieldset class="help">
   <legend>Usage</legend>
   <p>The Top section is about this wallet. It lists the title, the OID and version.</p>
   <p>The <em>Home</em> tab has a form labled <em>Incoming</em> to receive messages.  Enter the OID (or drag&amp;drop a link containing an OID) into the field and push <code>Go</code> to examine it.</p>
   <p>The <em>Order</em> form is for filing payments to other parties.
Select receiver amount and asset, enter a subject and optional message and push <code>Sign Order</code>
to file it.</p>
   <p>This wallet does <em>not</em> notify the receiver of outgoing payments made.  We rely on a
second channel (e.g., mail or chat) to convey the <span class="external">hash-links in the <code>##</code>
column</span> from the <em>Ledger</em> table of <code>outgoing</code> (or <code>sent</code>)
transactions to the receiver.
The receiver in turn needs to enter them in the <var>Incoming</var> form
to check and accept – or reject – the order.</p>
   <p>The <em>Ledger</em> tab shows all transactions which are not expired.</p>
   <p>In <em>Claim</em> tab one can issue new assets. Assets have to have a title (chosen freely; however some titles may convey legal implications)
and terms&amp;conditions.  Choose the latter with care to make your asset valueable for potential
holders.
When <em>Accounting</em> is checked, a fresh wallet will be attached to the new asset.</p>
   <p>The <em>Contacts</em> tab holds a "buddy list" attaching nick names to OIDs of counterpartie's wallets.</p>
   <p>The <em>Notaries</em> tab has (currently rather basic) forms to manage the replication of this wallet.</p>
   <p>Always visible are the <em>Inventory</em>, which lists the current balance for all assets,
and the <em>Terms</em> section is about this account and may be presented to other users.
(The text may be changed in the <code>manage</code> view available from the top section.)</p>
   <xsl:copy-of select="$metatalk"></xsl:copy-of>
  </fieldset>
 </xsl:variable>
 <xsl:variable name="immutable">
<!--

   This is the contract we shall use for documents which just don't change.

   We defer the discussion where exactly we get the value from here.

 -->
  <bail:copy-of>
or
 link-ref "holder statement"
 literal action-document(current-contract())
 literal action-document(action-document(message-creator(current-message())))
  </bail:copy-of>
 </xsl:variable>
 <xsl:variable name="here">
  <bail:copy-of>message-body current-place()</bail:copy-of>
 </xsl:variable>
 <xsl:variable name="wallet-witness2">
  <p class="fineprint">This account participates in correct bookkeeping
as detailed in sections "Auditing" and "Rules" below.
This account's adds the follow code:</p>
  <div class="terms" title="Current Terms">
   <xsl:copy-of select="$here/body/div[@id='terms']/node()"></xsl:copy-of>
  </div>
  <hr title="generic fine-print below"></hr>
  <blockquote class="fineprint" title="generic fine-print">
   <h2>Auditing</h2>
   <p>At <bail:copy-of>literal message-date(current-message())</bail:copy-of> the following notaries are commissioned
to audit the books (<a href="http://askemos.org/Abb8999dd38524dcc113f977d378a9ee0?_v=footnote&amp;_id=618">processing in agreement</a>) of this account and shall confirm my signature.</p>
   <ol>
    <bail:for-each select="sxpath(&apos;(Bag li)) message-replicates(current-place())">
     <bail:copy-of>
define id
 attribute-string 'resource current-node()

define href
 read-locator list(id)

define title
 guard
  ex $ else id
  sql-ref sql-query("select title from notaries where contract = ?1" id)

SXML $ li
 a @( href( ,href ) class("notary") title(,id) ) ,title
    </bail:copy-of>
    </bail:for-each>
   </ol>
   <p class="help">To aquire a proof from these notaries make sure to
  use different representative (peer device) or locate the IP address
  of those and connect them directly.</p>
   <h2>Type Contract</h2>
   <p>The account itself is governed by master contract <code><bail:copy-of>
define id current-contract()
define href
 read-locator list(id)
SXML $ a @( href( ,href ) title("source code OID") ) ,literal(id)
</bail:copy-of></code>.<span class="help"> Beware: Browsers likely display this contract in unintelligible form.
Know so for firefox and chrome. Use <em>source code view preserving white space formatting and XML comments</em> to display properly.
   That "parent contract" is a static XML document containing code written in <a href="http://askemos.org/A0cd6168e9408c9c095f700d7c6ec3224?_v=search&amp;_id=756">bail</a> and the <a href="http://askemos.org/A0cd6168e9408c9c095f700d7c6ec3224?_v=search&amp;_id=1478">BALL core API</a>.
There is no expectation that the reader is famillar with that language.
Basic knowledge in web standards and SQL should be enough to convince
the reader that this code maintains a correct balance and will never issue
payments exceeding funds.</span></p>
   <xsl:copy-of select="$metatalk"></xsl:copy-of>
  </blockquote>
 </xsl:variable>
 <xsl:variable name="wallet-witness">
<!--

 While it is the point of the Wallet to demonstrate the details in the
 witness record, it is confusing for applications.

 -->
  <xsl:choose>
   <xsl:when test="$here/body/div[@id='postamble']/node()">
    <div class="fineprint"><xsl:copy-of select="$here/body/div[@id='postamble']/node()"/></div>
    <div class="footer"><xsl:copy-of select="$here/body/div[@id='footer']/node()"/></div>
   </xsl:when>
   <xsl:otherwise><xsl:copy-of select="$wallet-witness2"/></xsl:otherwise>
  </xsl:choose>
 </xsl:variable>
 <xsl:variable name="css">
  <xsl:choose>
   <xsl:when test="$here/head/style">
    <xsl:copy-of select="$here/head/style"></xsl:copy-of>
   </xsl:when>
   <xsl:otherwise>
    <style type="text/css">.amount { background: aquamarine; padding: 0.2ex; text-align: right; }
.asset { background: goldenrod; padding: 0.2ex; }
.liability { color: red; }
.sender { background: lightcoral; }
.receiver { background: darkseagreen; }
.subject { background: cornsilk; }
.terms { color: cornflowerblue;}
.intern { color: red; }
.extern { color: green; }
.order { background: orange; }
.receipt { background: antiquewhite; }
.notary { background: lightcyan; }
.attachment { background: beige; }
.help { background: lavender; }
.fineprint { background: beige; font-size: smaller; }
.executable { background: gainsboro; font-family: monospace; white-space:pre; }
method { background: gainsboro; border: 1px dashed; margin: 1em; padding: 1em; }
td.amount, td.empty { width: 5ex;}
.menu { text-decoration: none; }
.accordion fieldset legend a { text-decoration: none; color: black;}
.accordion {}
.accordion fieldset form, .accordion fieldset div, .accordion fieldset p { display: none; }
.accordion fieldset table { display: none; }
.accordion fieldset:target form, .accordion fieldset:target div, .accordion fieldset:target p { display: block; }
.accordion fieldset:target table { display: table; }
</style>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:variable>
 <xsl:variable name="htmlheaders">
  <meta content="application/xhtml+xml; charset=UTF-8" http-equiv="Content-Type"></meta>
  <bail:link rel="icon" type="image/x-icon" bail:href="read-locator list(link-ref(&quot;icon&quot;))"></bail:link>
  <xsl:copy-of select="$css"></xsl:copy-of>
 </xsl:variable>
 <xsl:variable name="auth">
  <bail:copy-of>
define login
 or
  and-let* {* s data(form-field('login)) \\ (not(string-null?(s))) *} s
  anon-secret()

define codes
 and login
  guard
   ex $ else #f
   sql-query "select id, secret from login"

cond
 and( not(codes) service-level() )         "3"
 not(codes)                                ""
 secret-verify(sql-ref(codes 0 1) login)   "1"
 secret-verify(sql-ref(codes 1 1) login)   "2"
 else                                      ""
   </bail:copy-of>
 </xsl:variable>
 <xsl:variable name="authwrite">
  <bail:copy-of>
define login
 or
  and-let* {* s data(form-field('login)) \\ (not(string-null?(s))) *} s
  anon-secret()

define codes
 and login
  guard
   ex $ else #f
   sql-query "select id, secret, readonly from login"

cond
 and( not(codes) service-level() )        "3"
 not(codes)                               ""
 and( not(equal?( sql-ref(codes 0 2) 1)) secret-verify(sql-ref(codes 0 1) login) )  "1"
 and( not(equal?( sql-ref(codes 1 2) 1)) secret-verify(sql-ref(codes 1 1) login) )  "2"
 else                                     ""
   </bail:copy-of>
 </xsl:variable>
 <xsl:template mode="as-markdown" match="*">
  <bail:copy-of>mime-cast("text/x-markdown" "text/xml") current-node()</bail:copy-of>
 </xsl:template>
 <xsl:template name="instrument">
<!-- Format a payment instrument for internal use.  Display "nick name". -->
  <xsl:param name="contract"></xsl:param>
  <bail:copy-of>
define id
 string-&gt;oid
  data xsl-variable("contract")

define comment
 and id
  or
   guard
    ex $ else
     sxpath('(head title *text*)) fetch(id body: #f)
    sql-ref sql-query("select comment from instruments where contract = ?1" literal(id))
   "n/a"

if id
 SXML $ strong @( class("asset") )
  a @( href( ,read-locator(list(id)) ) title(,literal(id)) ) $$(,comment)
 "n/a"
  </bail:copy-of>
 </xsl:template>
 <xsl:template name="instrument-official">
<!-- Format a payment instrument for external use. Display original title. -->
  <xsl:param name="contract"></xsl:param>
  <bail:copy-of>
define id
 data xsl-variable("contract")

define comment0
 sxpath('(head title *text*)) fetch(string-&gt;oid(id) body: #f)

define comment
 let {* t data(comment0) *}
  if string-null?(t) "untitled" t

define href
 ;; read-locator list(id)
 id

SXML
 strong @( class("asset") )
  a @( href( ,href ) title(,id) ) ,comment
  " OID: "
  code $$(,id)
  </bail:copy-of>
 </xsl:template>
 <xsl:variable name="subjecthead">
  <table class="subject" title="about this wallet">
   <tr>
    <td title="Title">
     <h1>
      <xsl:value-of select="$here/head/title"/>
     </h1>
    </td>
    <td title="OID">
     <code>
      <bail:copy-of>literal self-reference()</bail:copy-of>
     </code>
    </td>
    <td title="Version Number">
     <bail:copy-of>version-identifier current-place()</bail:copy-of>
    </td>
   </tr>
  </table>
 </xsl:variable>
 <xsl:variable name="menu">
  <table class="menu">
   <tr>
    <bail:copy-of>
define views $ list
 '#("Home" "" "Handle Incoming Notice (receive payment, receipt or contract)")
 '#("Order" "order" "File Registered Notice (send payment)")
 '#("Ledger" "ledger" "Transaction Records")
 '#("Claim" "claim" "Claim New Asset (issue payment intrument)")
 '#("Contacts" "contacts" "Manage Counterparties")
 '#("Notaries" "notaries" "Manage Notaries")
 '#("Manage" "options" "Manage Wallet (access control, title and terms)")

define href(i)
 read-locator body: $ SXML
  form
   do ,vector-ref(i 1)
   version ,literal(version-identifier(current-place()))
   $$ ,children ,xsl-variable("login")

map
 lambda (i)
  if equal?( data(form-field('do)) vector-ref(i 1) )
   SXML $ td {* @ \\ class "menu extern" *} ,vector-ref(i 0)
   SXML $ td $ a {* @
class "menu intern"
href ,href(i)
title ,vector-ref(i 2)
*} ,vector-ref(i 0)
 views
    </bail:copy-of>
   </tr>
  </table>
 </xsl:variable>
 <xsl:template name="order.display">
<!-- Display an incoming order and controls to accept or reject it. -->
  <xsl:param name="id" required="yes"></xsl:param>
  <xsl:param name="notice" required="yes"></xsl:param>
  <bail:form method="post">
   <bail:copy-of>
define income string-&gt;oid(xsl-variable("id"))
define notice xsl-variable("notice")

define get(key)
 and notice
  attribute-string 'content
   sxpath(`( head (meta (@ (equal? (name ,key)))) )) notice

define receiver
 string-&gt;oid get("To")

define amount
 and-let* {* notice \\ a get("Amount") *}
  string-&gt;number a

define instrument
  string-&gt;oid get("Instrument")

define instrument-here
 guard ex(else(#f))
  sql-ref sql-query("select comment from instruments where contract = ?1" literal(instrument))

define instrument-name
 or instrument-here
  guard
   exception $ else("Warning: Ricardian Contract not readable!")
   data      $ sxpath('(head title *text*)) fetch(instrument body: #f)

define instrument-a()
 SXML $ a {* @
href ,read-locator(list(instrument))
target "_blank"
title ,literal(instrument)
class "asset"
*} $$( ,instrument-name )

define ifield()
 SXML $ fieldset
  legend("Alien Payment Instrument")
  $$ ,instrument-a()
  input {* @ \\ name "title" \\ type "text" \\ autocomplete "off"
title "Title Required For Payment Instrument"
value $ ,instrument-name
*}

define sender get("From")

define sender-edit
 read-locator body: $ SXML
  form satisfaction(,sender) $$( ,children ,xsl-variable("login") )

define label
 sql-ref
  sql-query
    "select case when exists (select no from processed where matches = ?1)
    then 'Old notice (not to be signed)' else 'Notice' end"
    literal(income)

define form()
 SXML
  label ,label
  input {* @ \\ type "hidden" \\ name "satisfaction" \\ value ,literal(income) *}
  label "from"
  a {* @
class "sender intern"
target "_blank"
href ,sender-edit
*} ,sql-ref(sql-query("select coalesce( (select title from accounts where contract = ?1), \"unkown\")" sender))
  label "amount"
  strong @(class("amount")) ,literal(amount)
  label "of"
  $$ ,if(instrument-here instrument-a() ifield())
  $$ ,and( sybil?( instrument income )  SXML(p("Not acceptable because 'sybil'.")) )
  label "for"
  input {* @
name "comment"
title "Payment Reference Text (free form)"
class "subject"
type "text"
autocomplete "off"
value $$( ,sxpath('(head title *text*)) ,notice )
*}

cond
 not(receiver) $  SXML $ p "No receiver found in document " (code ,(literal income)) "."
 eq?( receiver self-reference() )  $  form()
 else          $  SXML $ p "This payment goes to: " code(,literal(receiver))
   </bail:copy-of>
   <br></br>
   <xsl:choose>
    <xsl:when test="$notice/head/meta[@content='Order' and @name='ContractType'] and $notice/head/link[@rel='prev' and @title='Order']"><span class="help">Retour, not rejectable.</span></xsl:when>
    <xsl:otherwise>
     <span class="order" title="reject order">
      <input name="receive" type="radio" value="no"></input>
      <label>Retour</label>
     </span>
    </xsl:otherwise>
   </xsl:choose>
   <span class="receipt" title="accept order">
    <input checked="checked" name="receive" type="radio" value="yes"></input>
    <label>Receipt</label>
   </span>
   <input name="action" type="hidden" value="accept"></input>
   <xsl:copy-of select="$keeplogin"></xsl:copy-of>
   <input type="submit" value="Sign"></input>
   <br></br>
   <textarea class="terms" cols="40" name="text" rows="4" title="optional message"></textarea>
  </bail:form>
  <fieldset class="terms" title="Message">
   <legend>Text</legend>
   <xsl:copy-of select="$notice/body/div/div"></xsl:copy-of>
  </fieldset>
 </xsl:template>
 <xsl:template name="receipt.display">
<!-- Display a (simple, i.e., not return) receipt. -->
  <xsl:param name="id" required="yes"></xsl:param>
  <xsl:param name="notice" required="yes"></xsl:param>
  <xsl:variable name="order" select="$notice/head/link[@title='Order']/@href/text()"/>
    <xsl:variable name="fullorder">
   <bail:copy-of>
guard
  ex $ else
   SXML $ html $ head $ title $ "Order not readable."
  fetch xsl-variable("order")
   </bail:copy-of>
  </xsl:variable>
  <xsl:variable name="completes">
   <xsql:query rowset-element="" parameterized="yes">
    <template>select *, 0 as old from transactions where contract = ?1</template>
    <with-param select="$order"/>
   </xsql:query>
  </xsl:variable>
  <p class="receipt">This receipt completes the following transaction:</p>
  <xsl:for-each select="$completes">
   <xsl:call-template name="transaction.display"></xsl:call-template>
  </xsl:for-each>
  <bail:form method="post">
   <xsl:copy-of select="$keeplogin"></xsl:copy-of>
   <input name="action" type="hidden" value="close"></input>
   <bail:input name="receipt" type="hidden" xsl:value="$id"></bail:input>
   <input type="submit" value="Case Closed"></input>
  </bail:form>
  <fieldset title="Message">
   <legend>
    <span class="subject">
     <xsl:value-of select="$notice/head/title"/>
    </span>
   </legend>
   <xsl:copy-of select="$notice/body/div/div"></xsl:copy-of>
  </fieldset>
  <fieldset title="Orignal Outgoing Message">
   <legend>In Reply To: <span class="subject"><xsl:value-of select="$fullorder/head/title"></xsl:value-of></span></legend>
   <xsl:copy-of select="$fullorder/body/div/div"></xsl:copy-of>
  </fieldset>
 </xsl:template>
 <xsl:template name="asset.display">
<!-- Display Asses and control local name -->
  <xsl:param name="id" required="yes"></xsl:param>
  <xsl:param name="notice" required="yes"></xsl:param>
  <xsl:param name="action">
   <input name="action" type="hidden" value="changeasset"></input>
   <input type="submit" value="Change"></input>
  </xsl:param>
  <fieldset>
   <xsl:variable name="info">
    <xsql:query rowset-element="" parameterized="yes">
     <template>select * from instruments where contract = ?1</template>
     <with-param select="$id"/>
    </xsql:query>
   </xsl:variable>
   <xsl:variable name="wallet">
    <bail:copy-of>
define meta metainfo(string-&gt;oid(xsl-variable("id")))
attribute-string
 'href
 sxpath('(* links * (li (@ (equal? (resource "wallet")))) ))(meta)
    </bail:copy-of>
   </xsl:variable>
   <legend>Evaluate Asset</legend>
   <bail:form method="post">
    <table>
     <tr class="amount">
      <th>Amount</th>
      <td style="text-align:left;">
       <xsl:value-of select="$notice/head/meta[@name='Value']/@content"/>
<!--
       <bail:copy-of>
attribute-string 'content
 sxpath('( head (meta (@ (equal? (name "Value")))) ))
  xsl-variable "notice"
</bail:copy-of>
-->
      </td>
     </tr>
     <tr class="subject">
      <th>Title</th>
      <td title="official title">
       <xsl:value-of select="$notice/head/title"></xsl:value-of>
      </td>
     </tr>
     <tr class="asset">
      <th>Contract</th>
      <td title="OID, Ricardian Contract">
       <bail:input name="instrument" readonly="readonly" size="30" type="text" xsl:value="$id"></bail:input>
      </td>
      <td>
       <bail:copy-of>
define href
 read-locator list(string-&gt;oid(xsl-variable("id")))
SXML $ a {* @
class "asset extern"
title "View Complete Ricardian Contract"
href ,href
target "_blank"
*} "view"
</bail:copy-of>
      </td>
     </tr>
     <tr class="asset">
      <th>Display As</th>
      <td>
       <xsl:variable name="dflt">
        <xsl:choose>
         <xsl:when test="$info/comment/text()!=&apos;&apos;">
          <xsl:value-of select="$info/comment"></xsl:value-of>
         </xsl:when>
         <xsl:otherwise>
          <xsl:value-of select="$notice/head/title"></xsl:value-of>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:variable>
       <bail:input name="comment" size="30" title="private nick name" type="text" autocomplete="off" xsl:value="$dflt"></bail:input>
      </td>
     </tr>
     <tr class="terms">
      <th>Active</th>
      <td title="Asset (active) or Liability (passive)">
       <bail:copy-of>
define active
 equal? "1" data( sxpath('(active))(xsl-variable("info")) )

SXML $ input {* @
name "active"
title "active"
value "1"
type "checkbox"
,@(if active '(checked("checked")) '())
*}
</bail:copy-of>
      </td>
     </tr>
     <xsl:if test="$wallet!=&apos;&apos;">
      <xsl:variable name="name">
       <xsql:value-of parameterized="yes">
        <template>select title from accounts where contract = ?1</template>
	<with-param select="$wallet"/>
       </xsql:value-of>
      </xsl:variable>
      <tr class="subject">
       <th>Wallet</th>
       <td title="wallet attached">
        <xsl:copy-of select="$wallet"></xsl:copy-of>
        <bail:input name="wallet" type="hidden" xsl:value="$wallet"></bail:input>
       </td>
      </tr>
      <tr class="subject">
       <th>Wallet Title</th>
       <xsl:choose>
        <xsl:when test="$name=&apos;&apos;">
         <td title="wallet title required">
          <input name="wallettitle" size="30" type="text" autocomplete="off"></input>
         </td>
        </xsl:when>
        <xsl:otherwise>
         <td title="Local Wallet Alias">
          <xsl:copy-of select="$name"></xsl:copy-of>
         </td>
         <td>
          <bail:copy-of>
define href
 read-locator body: $ SXML
  form satisfaction($$(,xsl-variable "wallet")) $$( ,children ,xsl-variable("login") )
SXML $ a {* @
href ,href
class "intern"
*} "change"
  </bail:copy-of>
         </td>
        </xsl:otherwise>
       </xsl:choose>
      </tr>
     </xsl:if>
    </table>
    <xsl:copy-of select="$keeplogin"></xsl:copy-of>
    <xsl:copy-of select="$action"></xsl:copy-of>
   </bail:form>
   <fieldset class="terms" title="Terms &amp; Conditions">
    <legend>Terms &amp; Conditions</legend>
    <xsl:copy-of select="$notice/body/div/div"></xsl:copy-of>
   </fieldset>
  </fieldset>
 </xsl:template>
 <xsl:template name="account.display">
<!-- Display a wallet and controls to add it to local counterparties. -->
  <xsl:param name="id" required="yes"></xsl:param>
  <xsl:param name="notice" required="yes"></xsl:param>
  <xsl:variable name="local">
   <xsql:value-of parameterized="yes">
    <template>select title from accounts where contract = ?1</template>
    <with-param select="$id"/>
   </xsql:value-of>
  </xsl:variable>
  <xsl:variable name="title">
   <xsl:choose>
    <xsl:when test="$local=&apos;&apos;">
     <xsl:value-of select="$notice/head/title"></xsl:value-of>
    </xsl:when>
    <xsl:otherwise>
     <xsl:copy-of select="$local"></xsl:copy-of>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <bail:form method="post">
   <input name="action" type="hidden" value="account"></input>
   <xsl:copy-of select="$keeplogin"></xsl:copy-of>
   <div>
    <label>Accept account</label>
    <bail:input name="contract" size="40" readonly="readonly" title="Account identifier (OID) of new account." type="text" xsl:value="$id"></bail:input>
   </div>
   <div>
    <label>titled</label>
    <span class="subject">
     <xsl:value-of select="$notice/head/title"></xsl:value-of>
    </span>
    <label>by the name of</label>
    <bail:input name="title" title="Name to be used here. Empty name will unlist the account." type="text" autocomplete="off" xsl:value="$title"></bail:input>
   </div>
   <input type="submit" value="Change Account"></input>
  </bail:form>
  <fieldset class="terms" title="Current terms and conditions relating to the wallet.">
   <legend>Current terms from <xsl:copy-of select="$title"></xsl:copy-of></legend>
   <xsl:copy-of select="$notice/body/div[@class='terms']/node()"></xsl:copy-of>
  </fieldset>
 </xsl:template>
 <xsl:template name="transaction.display">
  <xsl:variable name="color">
   <xsl:choose>
    <xsl:when test="color/text()=&apos;1&apos;">amount liability</xsl:when>
    <xsl:otherwise>amount</xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <tr>
   <td>
    <xsl:value-of select="no"></xsl:value-of>
   </td>
   <bail:copy-of>
define get(key)
  sxpath((list key '*text*)) current-node()

define no string-&gt;number( data(get('no)) )

define status data(get('status))

define fmt
 cond
  or( equal?(status  "outgoing") equal?(status  "sent") )        "Payment-~a"
  or( equal?(status  "confirmed") equal?(status  "completed") )  "Receipt-~a"
  else "Asset-~a" ;; this is actually nonsense

define dir
 cond
  or( equal?(status  "outgoing") equal?(status  "sent") )        "order ~a"
  or( equal?(status  "confirmed") equal?(status  "completed") )  "receipt ~a"
  else "Asset-~a" ;; this is actually nonsense

define document
 link-ref format(fmt no)

define href
 read-locator body: $ SXML
  form satisfaction(,literal(document)) $$( ,children(xsl-variable("login")) )

define extern format(dir "extern")
define intern format(dir "intern")

define old
 if equal?(data(get('old)) "0")
  '()
  SXML $ input {* @
type "checkbox"
name "close"
title "record will be removed when checked"
value ,literal(no)
;; ,@(if equal?(status  "completed") '((checked "checked")) '() )
*}

SXML
 td {* @
class ,extern
*}
  code
   a {* @
href $$( ,read-locator (,document) )
target "_blank"
class ,extern
title "External. This link/OID is to be transferred to the receiver."
*} ,literal(document)
 td {* @
class ,intern
*}
  a {* @
href ,href
class ,intern
title "Internal. Click to read."
*} ,status
 td @(class(,extern)) $$(,old)

   </bail:copy-of>
   <xsl:choose>
    <xsl:when test="direction/text()=&apos;0&apos;">
     <td class="empty"></td>
     <bail:td title="outgoing amount" xsl:class="$color">
      <xsl:value-of select="value"></xsl:value-of>
     </bail:td>
    </xsl:when>
    <xsl:otherwise>
     <bail:td title="incoming amount" xsl:class="$color">
      <xsl:value-of select="value"></xsl:value-of>
     </bail:td>
     <td class="empty"></td>
    </xsl:otherwise>
   </xsl:choose>
   <td class="asset">
    <bail:copy-of>
define get(key)
  sxpath((list key '*text*)) current-node()

define href
 read-locator body: $ SXML
  form satisfaction( $$( ,get instrument ) )
   $$( ,children ,xsl-variable("login") )

SXML $ a {* @
href ,href
class "intern"
*} $$( ,get name )
    </bail:copy-of>
   </td>
   <bail:copy-of>
define get(key)
  sxpath((list key '*text*)) current-node()

define href
 read-locator body: $ SXML
  form satisfaction( $$( ,get mandant ) )
   $$( ,children ,xsl-variable("login") )

define class
 if equal?( data(get('direction)) "0")
  "receiver"
  "sender"

SXML $ td {* @
class ,class
*} $ a {* @
href ,href
class "intern"
*} $$( ,get counterparty )
   </bail:copy-of>
<!--
   <xsl:choose>
    <xsl:when test="direction='0'">
     <td class="receiver">
      <xsl:value-of select="mandant"/>
     </td>
    </xsl:when>
    <xsl:otherwise>
     <td class="sender">
      <xsl:value-of select="mandant"/>
     </td>
    </xsl:otherwise>
   </xsl:choose>
-->
   <td class="subject">
    <xsl:value-of select="comment" />
   </td>
   <td class="terms">
    <xsl:value-of select="booked" />
   </td>
  </tr>
 </xsl:template>
 <xsl:variable name="notice-view">
<!-- Dispatch on type of incoming notice. -->
  <bail:copy-of>
define raw data(form-field('satisfaction))
define income
 cond
  pcre("(A[[:xdigit:]]{32})")( raw ) =&gt;
   lambda (m) string-&gt;oid(cadr(m))
  else #f

define notice
 guard
  ex else(#f)
  and income
   fetch income body: #f

define complying
 and notice
  let {* from source-contract(income) \\ con action-document(income) *}
   or
    eq? current-contract() from
    eq? current-contract() con
    ;; We also allow literally equal contracts.
    equal?
      fetch message-body/plain current-contract() body: #f
      fetch message-body/plain from body: #f
    ;; allowing the last versions here to migrate funds.
    let {* other sxpath('(acceptable id *text*))(fetch(current-contract() body: #f)) *}
     or member(literal(from) other) member(literal(con) other)

define type
 and notice
  data $ txpath("head/meta[@name='ContractType']/@content") notice

define err(msg)
 SXML $ p ,msg " " (code ,(literal income)) "."

define result
 cond
  not(notice)    $  err "Could not read document"
  equal?(type "") $  err "No type declaration found in document"
  equal?(type "Wallet")
   xsl-variable apply: "account.display" param: "id" literal(income) param: "notice" notice
  not(complying) $  err "Sender's contract not in acceptable set."
  equal?(type "Order")
   xsl-variable apply: "order.display" param: "id" literal(income) param: "notice" notice
  equal?(type "Receipt")
   xsl-variable apply: "receipt.display" param: "id" literal(income) param: "notice" notice
  equal?(type "Assertion")
   xsl-variable apply: "asset.display" param: "id" literal(income) param: "notice" notice
  equal?(type "HolderStatement") $ err "Holder Statement. Display not yet implemented."
  else          $  err "Something is strange.  This should never happen."

SXML
 legend
   "Incoming "
   code $ a {* @ \\ title ,literal(income) \\ target "_blank" \\ class "intern"
 ;; Make sure the "read" goes via this account, otherwise is might be unreadable. 
href ,read-locator( (cons income message-location(current-message())) body: xsl-variable("login") )
*} ,literal(income)
 div $ img {* @ \\ src ,qrencode( literal(income) 'inline) *}
 $$ ,result
  </bail:copy-of>
 </xsl:variable>
 <xsl:template name="html">
<!-- The user interface -->
  <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
    <title>
     <xsl:value-of select="$here/head/title" />
    </title>
    <meta content="Wallet" name="ContractType"></meta>
    <xsl:copy-of select="$htmlheaders"></xsl:copy-of>
    <meta content="0" http-equiv="expires"></meta>
   </head>
   <body>
    <xsl:if test="$authwrite=&apos;&apos;">
     <p class="terms"><strong>Note:</strong> you are only authorized to explore the account. No changes are permitted.</p>
    </xsl:if>
    <xsl:copy-of select="$subjecthead"></xsl:copy-of>
    <xsl:copy-of select="$menu"></xsl:copy-of>
    <xsl:choose>
     <xsl:when test="form/satisfaction/text()!=&apos;&apos;">
      <fieldset id="incoming" title="incoming notice">
       <xsl:copy-of select="$notice-view"></xsl:copy-of>
      </fieldset>
     </xsl:when>
     <xsl:when test="form/do/text()=&apos;order&apos;">
      <fieldset id="order" title="File Registered Notice">
       <legend>Order</legend>
       <bail:form method="post">
        <input name="action" type="hidden" value="pay"></input>
        <xsl:copy-of select="$keeplogin"></xsl:copy-of>
        <div>
         <label>To</label>
         <select class="receiver" name="receiver" title="Account Receiving">
          <xsql:query id-attribute="value" id-attribute-column="contract" max-rows="300" row-element="option" rowset-element="">select contract, title as span from accounts</xsql:query>
         </select>
         <label>send</label>
         <input class="amount" name="amount" size="5" title="Amount to send (integer)" type="text" autocomplete="off" value="1"></input>
         <label>from</label>
         <select class="asset" name="instrument" title="Payment Instrument">
          <xsql:query id-attribute="value" id-attribute-column="id" max-rows="300" row-element="option" rowset-element="">
	select distinct i.contract as id, coalesce(i.comment,i.contract) as span
	from balance0 as b join instruments as i on b.instrument=i.id
	where b.value != 0
	</xsql:query>
         </select>
        </div>
        <div>
         <label>Subject</label>
         <input class="subject" name="title" size="35" title="Purpose" type="text" autocomplete="off"></input>
         <br></br>
         <input type="submit" value="Sign Order"></input>
        </div>
        <textarea class="terms" cols="50" name="text" rows="10" title="optional message"></textarea>
       </bail:form>
      </fieldset>
     </xsl:when>
     <xsl:when test="form/do/text()=&apos;claim&apos;">
      <fieldset id="claim" title="Assert a public claim. a.k.a. Issue a payment instrument, e.g. a bond.">
       <legend>Claim</legend>
       <bail:form method="post">
        <input name="action" type="hidden" value="issue"></input>
        <xsl:copy-of select="$keeplogin"></xsl:copy-of>
        <p>Accept <input class="amount" name="amount" size="5" title="Integer" type="text" autocomplete="off"></input> units under title <input class="subject" name="title" title="Title" type="text" autocomplete="off"></input></p>
        <h4>Terms &amp; Conditions</h4>
        <textarea class="terms" cols="40" name="text" rows="6" title="enter terms and conditions"></textarea>
        <br></br>
        <label title="Check to attach a new wallet to the Ricardian Contract.">Accounting</label>
        <input name="wallet" type="checkbox" value="yes"></input>
        <input type="submit" value="Sign Contract"></input>
       </bail:form>
      </fieldset>
     </xsl:when>
     <xsl:when test="form/do/text()=&apos;ledger&apos;">
      <fieldset id="ledger" title="Transaction Records">
       <legend>Ledger</legend>
       <bail:form method="post">
        <table>
         <thead>
          <tr>
           <th>#</th>
           <th>##</th>
           <th colspan="2">Status</th>
           <th colspan="2">Amount</th>
           <th>Asset</th>
           <th>Mandant</th>
           <th>Text</th>
           <th>Booked</th>
          </tr>
         </thead>
         <tbody>
          <xsql:for-each select="select *, datetime(booked) &gt; lim as old from transactions
join (select datetime(booked, &apos;-30 day&apos;) as lim from transactions
where no=(select max(no) from transactions))
where status!=&apos;closed&apos; and status!=&apos;finalized&apos; order by no">
           <xsl:call-template name="transaction.display"></xsl:call-template>
          </xsql:for-each>
         </tbody>
        </table>
        <bail:if test="= 1 $ sql-ref &apos;(select exists (select no from transactions
join (select datetime (booked : &quot;-30 day&quot;) as lim from transactions
where no = (select max (no) from transactions))
where (status = &quot;sent&quot; or status = &quot;completed&quot;)
and datetime (booked) &gt; lim))">
         <input name="action" type="hidden" value="expunge"></input>
         <xsl:copy-of select="$keeplogin"></xsl:copy-of>
         <input type="submit" value="expunge checked records"></input>
        </bail:if>
       </bail:form>
      </fieldset>
     </xsl:when>
     <xsl:when test="form/do=&apos;contacts&apos;">
      <fieldset id="counterparties" title="List of accounts as know by this account.">
       <legend>Counterparties</legend>
<!--

The simple version of the following table has no links.

     <xsql:query rowset-element="table" row-element="tr">
      select title as td, contract as td from accounts
     </xsql:query>
-->
       <table>
        <xsql:for-each select="select title, contract from accounts">
         <tr>
          <bail:copy-of>
define get(key)
 data
  sxpath((list key '*text*)) current-node()

define wallet get('contract)

define extern
 read-locator list( string-&gt;oid(wallet) )

define intern
 read-locator body: $ SXML
  form satisfaction( $$( ,get contract ) )
   $$( ,children ,xsl-variable("login") )

SXML
 td
  a {* @
title "view wallet " ,wallet
class "subject extern"
target "_blank"
href ,extern
*} $$( ,get title )
 td $ code $ a {* @
title "Change or delete local name."
href ,intern
class "subject intern"
*} "edit"
        </bail:copy-of>
         </tr>
        </xsql:for-each>
       </table>
      </fieldset>
     </xsl:when>
     <xsl:when test="form/do=&apos;notaries&apos;">
      <p class="help">Click Section To Expand.</p>
      <div class="accordion">
       <fieldset id="n.known" title="Kown Notaries">
        <legend>
         <a href="#n.known">Known Notaries</a>
        </legend>
        <bail:form method="post">
         <input name="action" type="hidden" value="notary"></input>
         <xsl:copy-of select="$keeplogin"></xsl:copy-of>
         <div>
          <label>Assign Notary</label>
          <input name="contract" size="40" title="contract" type="text" autocomplete="off"></input>
         </div>
         <div>
          <label>the name</label>
          <input name="title" title="title" type="text" autocomplete="off" value=""></input>
         </div>
         <input type="submit" value="Change Notary"></input>
        </bail:form>
        <xsql:query row-element="tr" rowset-element="table">select contract as td, title as td from notaries</xsql:query>
       </fieldset>
       <fieldset id="n.support" title="Commissioned Notaries">
        <legend>
         <a href="#n.support">Commissioned Notaries</a>
        </legend>
        <p class="help">This form is dangerous.  Make sure to never commission less than five notaries.
Otherwise you risk your wallet.</p>
        <bail:form method="post">
         <xsl:copy-of select="$keeplogin"></xsl:copy-of>
         <input name="action" type="hidden" value="commission"></input>
         <input name="name" size="35" title="name" type="text" autocomplete="off"></input>
         <input type="submit" value="submit"></input>
         <input type="reset" value="C"></input>
        </bail:form>
        <table>
         <tr>
          <th>##</th>
          <th>Local Name</th>
         </tr>
         <bail:for-each select="sxpath(&apos;(Bag li))(message-replicates(current-place()))">
          <tr>
           <bail:copy-of>
define id attribute-string('resource current-node())

define title
 guard
  ex $ else id
  sql-ref sql-query("select title from notaries where contract = ?1" id)

SXML
 td $ a {* @ \\ href ,read-locator(list(id)) \\ title ,id \\ class "notary" *} code(,id)
 td @(class("subject")) ,title
 td $ form {* @
method "post"
action ,write-locator(message-location(current-message()))
*}
  input {* @ \\ type "hidden" \\ name "name" \\ value ,id *}
  input {* @ \\ type "hidden" \\ name "action" \\ value "commission" *}
  input {* @ \\ type "submit" \\ value "off" *}
  $$ ,xsl-variable "keeplogin"
	  </bail:copy-of>
          </tr>
         </bail:for-each>
        </table>
       </fieldset>
      </div>
     </xsl:when>
     <xsl:when test="form/do/text()=&apos;options&apos;">
      <h2>Wallet Management</h2>
      <p class="help">Click Section To Expand.</p>
      <div class="accordion">
       <fieldset id="m.title" title="Preferred Title and Terms&amp;Conditions.">
        <legend>
         <a href="#m.title">Title</a>
        </legend>
        <bail:form method="post">
         <input name="action" type="hidden" value="change"></input>
         <xsl:copy-of select="$keeplogin"></xsl:copy-of>
         <label>Title</label>
         <bail:input name="title" type="text" autocomplete="off" xsl:value="$here/head/title/text()"></bail:input>
         <p class="help">Terms for display on this account.
Markdown formatting may be used as with <em>terms and conditions</em> elsewhere.
The resulting html will be stripped from active content for safe inclusion.</p>
         <textarea cols="40" name="text" rows="7" title="text">
          <xsl:apply-templates mode="as-markdown" select="$here/body/div[@id='terms']"/>
         </textarea>
         <br></br>
         <label>Header</label>
         <br></br>
         <textarea cols="40" name="header" rows="5" title="header">
          <xsl:apply-templates mode="as-markdown" select="$here/body/div[@id='header']"/>
         </textarea>
         <br></br>
         <label>Preamble</label>
         <br></br>
         <textarea cols="40" name="preamble" rows="5" title="preamble">
          <xsl:apply-templates mode="as-markdown" select="$here/body/div[@id='preamble']"/>
         </textarea>
         <br></br>
         <label>Postamble</label>
         <p>If the postable is not empty, it will be used instead of the default fineprint.</p>
         <textarea cols="40" name="postamble" rows="5" title="postamble">
          <xsl:apply-templates mode="as-markdown" select="$here/body/div[@id='postamble']"/>
         </textarea>
         <br></br>
         <label>Footer</label>
         <br></br>
         <textarea cols="40" name="footer" rows="5" title="footer">
          <xsl:apply-templates mode="as-markdown" select="$here/body/div[@id='footer']"/>
         </textarea>
         <br></br>
         <input type="submit" value="Set Title"></input>
        </bail:form>
       </fieldset>
       <fieldset id="m.login">
        <legend>
         <a href="#m.login">Authenticate using anonymous Code</a>
        </legend>
        <bail:form method="get">
         <input name="login" title="login" type="password"></input>
        </bail:form>
        <p>
         <a href="/LOGOUT">Log out</a>
        </p>
       </fieldset>
       <fieldset id="m.auth">
        <legend>
         <a href="#m.auth">Set Access Code</a>
        </legend>
        <xsl:copy-of select="$help-access"></xsl:copy-of>
        <bail:form method="post">
         <input name="action" type="hidden" value="secret"></input>
         <xsl:copy-of select="$keeplogin"></xsl:copy-of>
         <label>Secret</label>
         <input name="secret" size="38" title="secret" type="password"></input>
         <bail:if test="service-level()">
          <p>Suppling an empty code will remove anonymous access.</p>
         </bail:if>
         <label for="readonly">Read Only</label>
         <input checked="checked" name="readonly" title="readonly" type="checkbox" value="1"></input>
         <input type="submit" value="Set Code"></input>
        </bail:form>
       </fieldset>
       <fieldset id="m.changeicon" title="Upload a file to change the icon.">
        <legend>
         <a href="#m.changeicon">Change Icon</a>
        </legend>
        <bail:form enctype="multipart/form-data" method="post">
         <xsl:copy-of select="$keeplogin"></xsl:copy-of>
         <input name="icon" title="icon" type="file"></input>
         <input name="action" type="hidden" value="changeskin"></input>
         <input type="submit" value="Change"></input>
        </bail:form>
       </fieldset>
       <fieldset id="m.changecss">
        <legend>
         <a href="#m.changecss">Change CSS</a>
        </legend>
        <p class="help">Change CSS.</p>
        <bail:form method="post">
         <xsl:copy-of select="$keeplogin"></xsl:copy-of>
         <textarea class="executable" cols="80" name="css" rows="30" title="css">
          <xsl:copy-of select="$css/text()"></xsl:copy-of>
         </textarea>
         <br></br>
         <input name="action" type="hidden" value="change"></input>
         <input type="submit" value="Change CSS"></input>
        </bail:form>
       </fieldset>
       <fieldset id="m.changeskin" title="Upload a file to change the visual appearance.">
        <legend>
         <a href="#m.changeskin">Change Skin</a>
        </legend>
        <p class="help">A skin is a program replacing the default user interface, for example this one.</p>
        <bail:form enctype="multipart/form-data" method="post">
         <xsl:copy-of select="$keeplogin"></xsl:copy-of>
         <input name="body" title="body" type="file"></input>
         <input name="action" type="hidden" value="changeskin"></input>
         <label for="remove">remove</label>
         <input name="remove" title="remove any skin" type="checkbox" value="yes"></input>
         <input type="submit" value="Change"></input>
        </bail:form>
       </fieldset>
       <fieldset id="m.changeapp" title="Upload a file to change the application.">
        <legend>
         <a href="#m.changeapp">Change Application</a>
        </legend>
        <div class="help">
         <p>An application is a program partialy replacing the user
         interface for unauthenticated access to the wallet.</p>
        </div>
        <bail:form enctype="multipart/form-data" method="post">
         <input name="app" title="app" type="file"></input>
         <label for="remove">remove</label>
         <input name="remove" title="remove" type="checkbox" value="yes"></input>
         <input name="action" title="action" type="hidden" value="changeskin"></input>
         <input type="submit" value="Change"></input>
        </bail:form>
       </fieldset>
       <fieldset id="m.protection">
        <legend>
         <a href="#m.protection">Protection</a>
        </legend>
        <bail:form method="post">
         <xsl:copy-of select="$keeplogin"></xsl:copy-of>
         <input name="action" type="hidden" value="protect"></input>
         <bail:input name="protect" size="60" title="protect" type="text" autocomplete="off" bail:value="right-&gt;string $ message-protection current-place()"></bail:input>
         <input type="submit" value="submit"></input>
        </bail:form>
       </fieldset>
       <fieldset id="m.advanced">
        <legend>
         <a href="#m.advanced">Advanced</a>
        </legend>
        <p>Experts see <bail:a class="intern" title="low level access" bail:href="read-locator body: format(&quot;login=~a&amp;xmlns=a&quot; data(xsl-variable(&quot;login&quot;)))">meta data</bail:a> for detailed audit.
(Note that this exposes control forms.  Those are void, the corresponding control code is disabled.)</p>
       </fieldset>
      </div>
     </xsl:when>
     <xsl:otherwise>
      <fieldset id="incoming" title="incoming notice">
       <legend>Incoming</legend>
       <bail:form method="get">
        <xsl:copy-of select="$keeplogin"></xsl:copy-of>
        <label for="satisfaction">Get</label>
        <input name="satisfaction" size="60" title="Drag URL or paste document identifier (OID) of incoming notice." type="text" autocomplete="off"></input>
        <input title="Check Message" type="submit" value="Go"></input>
        <input title="Clear Form" type="reset" value="C"></input>
       </bail:form>
      </fieldset>
      <p>
       <bail:img bail:src="qrencode literal(self-reference()) &apos;inline"></bail:img>
      </p>
     </xsl:otherwise>
    </xsl:choose>
    <fieldset title="Assets in this account.">
     <legend>Inventory</legend>
     <table>
      <tr>
       <th colspan="2">Balance</th>
       <th title="Total count of this asset.">Total</th>
       <th align="left" title="Payment Instrument">Asset</th>
      </tr>
      <xsql:for-each select="select value, active, coalesce(total,&apos;n/a&apos;) as total, instrument, comment from balance where value != 0">
       <tr>
        <xsl:choose>
         <xsl:when test="active/text()!=1">
          <td class="empty"></td>
          <td class="amount liability">
           <xsl:value-of select="value" />
          </td>
         </xsl:when>
         <xsl:otherwise>
          <td class="amount">
           <xsl:copy-of select="value/text()"></xsl:copy-of>
          </td>
          <td class="empty"></td>
         </xsl:otherwise>
        </xsl:choose>
        <td align="right" class="fineprint empty">
         <xsl:copy-of select="total/text()"></xsl:copy-of>
        </td>
        <td class="asset">
         <bail:copy-of>
define get(key)
  sxpath((list key '*text*)) current-node()

define instrument string-&gt;oid( data(get('instrument)) )

define comment
 let ((x get('comment)))
  if or( not(x) equal?(data(x) "#f") )
   literal instrument
   x

define request
 SXML $ form (satisfaction ,literal(instrument))
  $$(,children ,xsl-variable("login"))

SXML
 a {* @
href $$( ,read-locator (,instrument) )
class "extern"
target "_blank"
*} $$(,comment)
 " "
 a {* @
href $$( ,read-locator body: ,request )
class "intern"
*} "edit"
         </bail:copy-of>
        </td>
       </tr>
      </xsql:for-each>
     </table>
    </fieldset>
    <fieldset class="terms" title="Current terms and conditions relating to this wallet.">
     <legend title="Go to &apos;manage&apos; to change the text.">Terms</legend>
     <xsl:copy-of select="$here/body/div[@id='terms']/node()"></xsl:copy-of>
    </fieldset>
    <xsl:copy-of select="$help-wallet"></xsl:copy-of>
   </body>
  </html>
 </xsl:template>
<!--

This template dispatchs requests to *read* this Wallet.
Only skinnable parts are handled here.

-->
 <xsl:template match="request[@type=&apos;read&apos;]">
  <xsl:choose>
<!-- Note: this case is embedded in the basic HTML frame enforced by the basic contract.
We must only provide the body part here. -->
   <xsl:when test="$auth=&apos;&apos;">
    <table class="subject">
     <tr>
      <td title="Title">
       <h1>
        <xsl:copy-of select="$here/head/title/text()"></xsl:copy-of>
       </h1>
      </td>
      <td title="OID">
       <code>
        <bail:copy-of>literal self-reference()</bail:copy-of>
       </code>
      </td>
      <td>
       <bail:img bail:src="qrencode literal(self-reference()) &apos;inline"></bail:img>
      </td>
     </tr>
    </table>
    <fieldset id="login">
     <legend>Login if you can.</legend>
     <bail:form method="get">
      <bail:input name="satisfaction" type="hidden" xsl:value="form/satisfaction/text()"></bail:input>
      <input name="login" type="password"></input>
     </bail:form>
    </fieldset>
    <div class="header">
     <xsl:copy-of select="$here/body/div[@id='header']/node()"></xsl:copy-of>
    </div>
    <div class="preamble">
     <xsl:copy-of select="$here/body/div[@id='preamble']/node()"></xsl:copy-of>
    </div>
    <xsl:choose>
     <xsl:when test="$here/body/div[@id='postamble']/node()">
      <div class="terms" title="Current Terms">
       <xsl:copy-of select="$here/body/div[@id='terms']/node()"></xsl:copy-of>
      </div>
      <div class="fineprint">
       <xsl:copy-of select="$here/body/div[@id='postamble']/node()"></xsl:copy-of>
      </div>
      <div class="footer">
       <xsl:copy-of select="$here/body/div[@id='footer']/node()"></xsl:copy-of>
      </div>
     </xsl:when>
     <xsl:otherwise>
      <xsl:copy-of select="$wallet-witness"></xsl:copy-of>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:when>
<!--

Issuing payment instruments is currently a two step process for no
better reason than simplicity of implementation.

-->
   <bail:when test="positive?  sql-ref( &apos;(select exists (select id from status where value = &quot;unconfirmed&quot;))) ">
    <html xmlns="http://www.w3.org/1999/xhtml">
     <head>
      <title>New Asset</title>
      <meta content="0" http-equiv="expires"></meta>
      <xsl:copy-of select="$htmlheaders"></xsl:copy-of>
     </head>
     <body>
      <xsl:variable name="link">
       <xsql:value-of>select concat('Asset-', no) from next_instrument</xsql:value-of>
      </xsl:variable>
      <xsl:variable name="instrument">
       <bail:copy-of>fetch xsl-variable("link")</bail:copy-of>
      </xsl:variable>
      <xsl:copy-of select="$subjecthead"></xsl:copy-of>
      <xsl:call-template name="asset.display">
       <xsl:with-param name="id">
        <bail:copy-of>literal link-ref(xsl-variable("link")) </bail:copy-of>
       </xsl:with-param>
       <xsl:with-param name="notice">
        <xsl:copy-of select="$instrument"></xsl:copy-of>
       </xsl:with-param>
       <xsl:with-param name="action">
        <input name="action" type="hidden" value="confirm"></input>
        <input type="submit" value="Confirm"></input>
       </xsl:with-param>
      </xsl:call-template>
     </body>
    </html>
   </bail:when>
   <bail:when test="= 1 $ sql-ref &apos;(select exists (select no from transactions
where (status = &quot;outgoing&quot; or status = &quot;confirmed&quot;)))">
    <html xmlns="http://www.w3.org/1999/xhtml">
     <head>
      <title>Pending Activity</title>
      <meta content="Wallet" name="ContractType"></meta>
      <meta content="0" http-equiv="expires"></meta>
      <xsl:copy-of select="$htmlheaders"></xsl:copy-of>
     </head>
     <body>
      <xsl:copy-of select="$subjecthead"></xsl:copy-of>
      <fieldset>
       <legend>Pending Activity</legend>
       <p class="help">You have notices to send.
Please transfer the <code class="extern">code</code> to the receiver.</p>
       <table>
        <xsql:for-each select="select *, 0 as old from transactions where (status = &apos;outgoing&apos; or status = &apos;confirmed&apos;)">
         <xsl:call-template name="transaction.display"></xsl:call-template>
         <tr>
          <td colspan="5">
           <bail:copy-of>
define get(key)
  sxpath((list key '*text*)) current-node()

define no string-&gt;number( data(get('no)) )

define status data(get('status))

define fmt
 cond
  or( equal?(status  "outgoing") equal?(status  "sent") )        "Payment-~a"
  or( equal?(status  "confirmed") equal?(status  "completed") )  "Receipt-~a"
  else "Asset-~a" ;; this is actually nonsense

define document
 link-ref format(fmt no)

define src
 qrencode literal(document) 'inline

SXML $ img {* @
src ,src
*}
</bail:copy-of>
          </td>
         </tr>
        </xsql:for-each>
       </table>
       <bail:form method="post">
        <input name="action" type="hidden" value="expunge"></input>
        <xsl:copy-of select="$keeplogin"></xsl:copy-of>
        <input type="submit" value="Done"></input>
       </bail:form>
      </fieldset>
      <xsl:if test="form/satisfaction">
       <fieldset>
        <xsl:copy-of select="$notice-view"></xsl:copy-of>
       </fieldset>
      </xsl:if>
      <xsl:copy-of select="$help-wallet"></xsl:copy-of>
     </body>
    </html>
   </bail:when>
   <xsl:otherwise>
    <xsl:call-template name="html"></xsl:call-template>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>
</xsl:stylesheet>
